Contenido de: C:\Users\Tu\Downloads\AppWeb4\AppWeb\code\output.txt


Contenido de: C:\Users\Tu\Downloads\AppWeb4\AppWeb\images\output.txt
#!/usr/bin/env python """Django's command-line utility for administrative tasks.""" import os import sys   def main():     """Run administrative tasks."""     os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mausoleum_core.settings')     try:         from django.core.management import execute_from_command_line     except ImportError as exc:         raise ImportError(             "Couldn't import Django. Are you sure it's installed and "             "available on your PYTHONPATH environment variable? Did you "             "forget to activate a virtual environment?"         ) from exc     execute_from_command_line(sys.argv)   if __name__ == '__main__':     main()   

Contenido de: C:\Users\Tu\Downloads\AppWeb4\AppWeb\mausoleum\output.txt
from django.contrib import admin from .models import User  # y los demás modelos que crees  # admin.site.register(User)  import requests  API_BASE_URL = "http://localhost:8080/api"  # Cambiar a la URL real donde corre AppServer  class APIClient:      def __init__(self, access_token=None):         self.access_token = access_token  # Este token debe venir del flujo de login de appWeb (Auth0)         self.base_url = API_BASE_URL  # <--- aquí la defines como atributo de instancia       def set_access_token(self, token):         self.access_token = token      def _get_headers(self):         headers = {             "Content-Type": "application/json",         }         if self.access_token:             headers["Authorization"] = f"Bearer {self.access_token}"         return headers      # --------- USERS ---------     def list_users(self):         url = f"{API_BASE_URL}/users/"         resp = requests.get(url, headers=self._get_headers())         return resp.json() if resp.ok else []      def get_user(self, user_id):         url = f"{API_BASE_URL}/users/{user_id}/"         resp = requests.get(url, headers=self._get_headers())         return resp.json() if resp.ok else None      # --------- DECEASED ---------     def list_deceased(self):         url = f"{API_BASE_URL}/deceased/"         resp = requests.get(url, headers=self._get_headers())         return resp.json() if resp.ok else []      def get_deceased(self, deceased_id):         url = f"{API_BASE_URL}/deceased/{deceased_id}/"         resp = requests.get(url, headers=self._get_headers())         return resp.json() if resp.ok else None      def create_deceased(self, data):         url = f"{API_BASE_URL}/deceased/"         resp = requests.post(url, json=data, headers=self._get_headers())         return resp.json() if resp.ok else None      def update_deceased(self, deceased_id, data):         url = f"{API_BASE_URL}/deceased/{deceased_id}/"         resp = requests.put(url, json=data, headers=self._get_headers())         return resp.json() if resp.ok else None      def delete_deceased(self, deceased_id):         url = f"{API_BASE_URL}/deceased/{deceased_id}/"         resp = requests.delete(url, headers=self._get_headers())         return resp.ok      # --------- VIDEOS ---------     def list_videos(self):         url = f"{API_BASE_URL}/videos/"         resp = requests.get(url, headers=self._get_headers())         return resp.json() if resp.ok else []      def get_video(self, video_id):         url = f"{API_BASE_URL}/videos/{video_id}/"         resp = requests.get(url, headers=self._get_headers())         return resp.json() if resp.ok else None      def create_video(self, data):         url = f"{API_BASE_URL}/videos/"         resp = requests.post(url, json=data, headers=self._get_headers())         return resp.json() if resp.ok else None      def update_video(self, video_id, data):         url = f"{API_BASE_URL}/videos/{video_id}/"         resp = requests.put(url, json=data, headers=self._get_headers())         return resp.json() if resp.ok else None      def delete_video(self, video_id):         url = f"{API_BASE_URL}/videos/{video_id}/"         resp = requests.delete(url, headers=self._get_headers())         return resp.ok      # --------- IMAGES ---------     def list_images(self):         url = f"{API_BASE_URL}/images/"         resp = requests.get(url, headers=self._get_headers())         return resp.json() if resp.ok else []      def get_image(self, image_id):         url = f"{API_BASE_URL}/images/{image_id}/"         resp = requests.get(url, headers=self._get_headers())         return resp.json() if resp.ok else None      def create_image(self, data):         url = f"{API_BASE_URL}/images/"         resp = requests.post(url, json=data, headers=self._get_headers())         return resp.json() if resp.ok else None      def update_image(self, image_id, data):         url = f"{API_BASE_URL}/images/{image_id}/"         resp = requests.put(url, json=data, headers=self._get_headers())         return resp.json() if resp.ok else None      def delete_image(self, image_id):         url = f"{API_BASE_URL}/images/{image_id}/"         resp = requests.delete(url, headers=self._get_headers())         return resp.ok      # --------- RELATIONS ---------     def list_relations(self):         url = f"{API_BASE_URL}/relations/"         resp = requests.get(url, headers=self._get_headers())         return resp.json() if resp.ok else []      def get_relation(self, relation_id):         url = f"{API_BASE_URL}/relations/{relation_id}/"         resp = requests.get(url, headers=self._get_headers())         return resp.json() if resp.ok else None      def create_relation(self, data):         url = f"{API_BASE_URL}/relations/"         resp = requests.post(url, json=data, headers=self._get_headers())         return resp.json() if resp.ok else None      def update_relation(self, relation_id, data):         url = f"{API_BASE_URL}/relations/{relation_id}/"         resp = requests.put(url, json=data, headers=self._get_headers())         return resp.json() if resp.ok else None      def delete_relation(self, relation_id):         url = f"{API_BASE_URL}/relations/{relation_id}/"         resp = requests.delete(url, headers=self._get_headers())         return resp.ok      # --------- USER-DECEASED ---------     def create_user_deceased(self, data):         url = f"{API_BASE_URL}/user-deceased/"         resp = requests.post(url, json=data, headers=self._get_headers())         return resp.json() if resp.ok else None      # --------- REQUESTS ---------     def list_requests(self):         url = f"{API_BASE_URL}/requests/"         resp = requests.get(url, headers=self._get_headers())         return resp.json() if resp.ok else []      def get_request(self, request_id):         url = f"{API_BASE_URL}/requests/{request_id}/"         resp = requests.get(url, headers=self._get_headers())         return resp.json() if resp.ok else None      def create_request(self, data):         url = f"{API_BASE_URL}/requests/"         resp = requests.post(url, json=data, headers=self._get_headers())         return resp.json() if resp.ok else None      def update_request(self, request_id, data):         url = f"{API_BASE_URL}/requests/{request_id}/"         resp = requests.put(url, json=data, headers=self._get_headers())         return resp.json() if resp.ok else None      def delete_request(self, request_id):         url = f"{API_BASE_URL}/requests/{request_id}/"         resp = requests.delete(url, headers=self._get_headers())         return resp.ok      # --------- NOTIFICATIONS ---------     def list_notifications(self):         url = f"{API_BASE_URL}/notifications/"         resp = requests.get(url, headers=self._get_headers())         return resp.json() if resp.ok else []      def get_notification(self, notification_id):         url = f"{API_BASE_URL}/notifications/{notification_id}/"         resp = requests.get(url, headers=self._get_headers())         return resp.json() if resp.ok else None      def create_notification(self, data):         url = f"{API_BASE_URL}/notifications/"         resp = requests.post(url, json=data, headers=self._get_headers())         return resp.json() if resp.ok else None      def update_notification(self, notification_id, data):         url = f"{API_BASE_URL}/notifications/{notification_id}/"         resp = requests.put(url, json=data, headers=self._get_headers())         return resp.json() if resp.ok else None      def delete_notification(self, notification_id):         url = f"{API_BASE_URL}/notifications/{notification_id}/"         resp = requests.delete(url, headers=self._get_headers())         return resp.ok      # --------- VR APP SPECIFIC ---------      def get_user_id_by_qr(self, qr_code):         url = f"{API_BASE_URL}/vr/user-id-by-qr/{qr_code}/"         resp = requests.get(url, headers=self._get_headers())         return resp.json() if resp.ok else None      def get_deceased_by_user(self, user_id):         url = f"{API_BASE_URL}/vr/deceased-by-user/{user_id}/"         resp = requests.get(url, headers=self._get_headers())         return resp.json() if resp.ok else []      def get_images_by_deceased(self, deceased_id):         url = f"{API_BASE_URL}/vr/images-by-deceased/{deceased_id}/"         resp = requests.get(url, headers=self._get_headers())         return resp.json() if resp.ok else []      def get_videos_by_deceased(self, deceased_id):         url = f"{API_BASE_URL}/vr/videos-by-deceased/{deceased_id}/"         resp = requests.get(url, headers=self._get_headers())         return resp.json() if resp.ok else []      def get_relations_by_deceased(self, deceased_id):         url = f"{API_BASE_URL}/vr/relations-by-deceased/{deceased_id}/"         resp = requests.get(url, headers=self._get_headers())         return resp.json() if resp.ok else []      # --------- APPWEB SPECIFIC ---------     # Dashboard     def get_dashboard(self):         # print(f"token de acceso: {self._get_headers()}")         url = f"{API_BASE_URL}/appweb/dashboard/"         resp = requests.get(url, headers=self._get_headers())         return resp.json() if resp.ok else {}      # Family members list     def get_family_members(self):         print(self._get_headers())  # Para depuración, borrar después         url = f"{API_BASE_URL}/appweb/family-members/"         resp = requests.get(url, headers=self._get_headers())         return resp.json() if resp.ok else {}      # Add family member (deceased)     def add_family_member(self, data):         url = f"{API_BASE_URL}/appweb/family-members/add/"         resp = requests.post(url, json=data, headers=self._get_headers())         print(self._get_headers()) #borrar         return resp.json() if resp.ok else None      # Share family member     def share_family_member(self, id, data):         url = f"{API_BASE_URL}/appweb/family-members/{id}/share/"         resp = requests.post(url, json=data, headers=self._get_headers())         return resp.json() if resp.ok else None      # Edit family member     def edit_family_member(self, id, data):         url = f"{API_BASE_URL}/appweb/family-members/{id}/edit/"         resp = requests.put(url, json=data, headers=self._get_headers())         return resp.json() if resp.ok else None      # Delete family member     def delete_family_member(self, id):         url = f"{API_BASE_URL}/appweb/family-members/{id}/delete/"         resp = requests.delete(url, headers=self._get_headers())         return resp.ok      # Request access     def request_access(self, id_deceased):         url = f"{API_BASE_URL}/appweb/request-access/{id_deceased}/"         resp = requests.post(url, headers=self._get_headers())         return resp.json() if resp.ok else None      # Approve request     def approve_request(self, request_id, action):         url = f"{API_BASE_URL}/appweb/approve-request/{request_id}/{action}/"         resp = requests.post(url, headers=self._get_headers())         return resp.json() if resp.ok else None      # Notifications list     def get_notifications(self):         url = f"{API_BASE_URL}/notifications/"         resp = requests.get(url, headers=self._get_headers())         return resp.json() if resp.ok else []      # Mark notification as read     def mark_notification_read(self, notification_id):         url = f"{API_BASE_URL}/appweb/notifications/read/{notification_id}/"         resp = requests.post(url, headers=self._get_headers())         return resp.json() if resp.ok else None      # Handle notification action (accept, decline, read)     def handle_notification_action(self, notification_id, action):         url = f"{API_BASE_URL}/appweb/notification-action/{notification_id}/{action}/"         resp = requests.post(url, headers=self._get_headers())         return resp.json() if resp.ok else None      # --------- Search Deceased (AJAX) ---------     def search_deceased(self, query):         url = f"{API_BASE_URL}/deceased/search/"         params = {"q": query}         resp = requests.get(url, headers=self._get_headers(), params=params)         return resp.json() if resp.ok else {"results": []}      def get_user_by_email(self, email):         url = f"{API_BASE_URL}/users/by-email/"         params = {'email': email}         resp = requests.get(url, headers=self._get_headers(), params=params)         print(self._get_headers()) #borrar         if resp.ok:             return resp.json()         return {'error': 'Request failed'}      def create_user(self, data):         url = f"{API_BASE_URL}/users/"         resp = requests.post(url, json=data, headers=self._get_headers())         if resp.ok:             return resp.json()         return None  from django.apps import AppConfig   class MausoleumConfig(AppConfig):     default_auto_field = 'django.db.models.BigAutoField'     name = 'mausoleum'  from django.shortcuts import redirect from django.urls import reverse from functools import wraps  def login_required_auth0(view_func):     def wrapper(request, *args, **kwargs):         if 'user' not in request.session:             return redirect(reverse('auth0_login'))         return view_func(request, *args, **kwargs)     return wrapper   def login_required_custom(view_func):     @wraps(view_func)     def _wrapped_view(request, *args, **kwargs):         if 'user' not in request.session or 'access_token' not in request.session['user']:             return redirect('auth0_login')         return view_func(request, *args, **kwargs)     return _wrapped_view  from django import forms  class ImageForm(forms.Form):     image_file = forms.FileField(required=True)     event_title = forms.CharField(max_length=100)     description = forms.CharField(widget=forms.Textarea)  class VideoForm(forms.Form):     video_file = forms.FileField(required=True)     event_title = forms.CharField(max_length=100)     description = forms.CharField(widget=forms.Textarea)  class UserForm(forms.Form):     id_user = forms.IntegerField(required=False)     name = forms.CharField(max_length=100)     email = forms.EmailField()     password = forms.CharField(widget=forms.PasswordInput, required=False)  class LoginForm(forms.Form):     email = forms.EmailField(label='Email', max_length=100)     password = forms.CharField(widget=forms.PasswordInput, label='Password')   class DeceasedForm(forms.Form):     name = forms.CharField(max_length=100)     date_birth = forms.DateTimeField(required=False)     date_death = forms.DateTimeField(required=False)     description = forms.CharField(required=False, widget=forms.Textarea)     burial_place = forms.CharField(max_length=100, required=False)   class ShareDeceasedForm(forms.Form):     email = forms.EmailField(         label="Email of the user to share with",         widget=forms.EmailInput(attrs={             'placeholder': 'example@example.com',             'class': 'border rounded p-2 w-full'         })     )   class User:     def __init__(self, id_user=None, name=None, email=None, password=None):         self.id_user = id_user         self.name = name         self.email = email         self.password = password      def __str__(self):         return self.name or ''  class Deceased:     def __init__(self, id_deceased=None, name=None, date_birth=None, date_death=None,                  description=None, burial_place=None, visualization_state=None, visualization_code=None):         self.id_deceased = id_deceased         self.name = name         self.date_birth = date_birth         self.date_death = date_death         self.description = description         self.burial_place = burial_place         self.visualization_state = visualization_state         self.visualization_code = visualization_code      def __str__(self):         return self.name or ''  class Image:     def __init__(self, id_image=None, image_link=None, event_title=None, description=None):         self.id_image = id_image         self.image_link = image_link         self.event_title = event_title         self.description = description      def __str__(self):         return self.event_title or ''  class Video:     def __init__(self, id_video=None, video_link=None, event_title=None, description=None):         self.id_video = id_video         self.video_link = video_link         self.event_title = event_title         self.description = description      def __str__(self):         return self.event_title or ''  from django.test import TestCase  # Create your tests here.  from django.urls import path from django.conf import settings from django.conf.urls.static import static from . import views  urlpatterns = [     # Authentication     path('', views.auth0_login, name='auth0_login'),  # raíz para login (redirige a Auth0)     path('login/', views.auth0_login, name='auth0_login'),     path('callback/', views.callback, name='callback'),     path('logout/', views.auth0_logout, name='auth0_logout'),      # Dashboard     path('dashboard/', views.dashboard, name='dashboard'),      # Deceased family members     path('add/', views.add_family_member, name='add_family_member'),     path('edit/<int:id>/', views.edit_family_member, name='edit_family_member'),     path('delete/<int:id>/', views.delete_family_member, name='delete_family_member'),     path('memories/', views.family_member_list, name='family_member_list'),     path('share/<int:id>/', views.share_family_member, name='share_family_member'),     path('ajax/search_deceased/', views.ajax_search_deceased, name='ajax_search_deceased'),      # Access control     path('request-access/<int:id_deceased>/', views.request_access, name='request_access'),     path('approve-request/<int:request_id>/<str:action>/', views.approve_request, name='approve_request'),      # Notifications     path('notifications/', views.notifications, name='notifications'),     path('notifications/read/<int:notification_id>/', views.mark_notification_read, name='mark_notification_read'),     path('notification-action/<int:notification_id>/<str:action>/', views.handle_notification_action, name='handle_notification_action'), ]  if settings.DEBUG:     urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)  import os import re import requests from urllib.parse import urlencode from django.shortcuts import render, redirect, get_object_or_404 from django.utils import timezone from django.conf import settings from django.core.files.storage import FileSystemStorage from django.core.mail import send_mail from .decorators import login_required_auth0, login_required_custom from .forms import DeceasedForm, ShareDeceasedForm, ImageForm, VideoForm from django.db import connection from django.views.decorators.http import require_GET from django.http import JsonResponse  from .api_client import APIClient from django.contrib.auth.decorators import login_required from django.utils.decorators import method_decorator from django.views.decorators.csrf import csrf_exempt     # -------------------- AUTH0 --------------------  def auth0_login(request):     params = {         'client_id': settings.AUTH0_CLIENT_ID,         'response_type': 'code',         'scope': 'openid profile email',         'redirect_uri': settings.AUTH0_CALLBACK_URL,     }     return redirect(f"https://{settings.AUTH0_DOMAIN}/authorize?" + urlencode(params))  def callback(request):     code = request.GET.get('code')     token_url = f"https://{settings.AUTH0_DOMAIN}/oauth/token"     token_payload = {         'grant_type': 'authorization_code',         'client_id': settings.AUTH0_CLIENT_ID,         'client_secret': settings.AUTH0_CLIENT_SECRET,         'code': code,         'redirect_uri': settings.AUTH0_CALLBACK_URL,     }      token_info = requests.post(token_url, json=token_payload).json()     user_url = f"https://{settings.AUTH0_DOMAIN}/userinfo"     headers = {'Authorization': f"Bearer {token_info['access_token']}"}     user_info = requests.get(user_url, headers=headers).json()      email = user_info.get('email')     name = user_info.get('name', '')     sub = user_info.get('sub', '')      api_client = APIClient()      # Consultar usuario en appServer, esperar que incluya token OAuth local     response = api_client.get_user_by_email(email)      if 'access_token' in response:         # Guardar solo token local de appServer         request.session['user'] = {             'email': email,             'name': name,             'picture': user_info.get('picture'),             'access_token': response['access_token'],         }     else:         # Usuario no existe, crear y obtener token local         user_data = {             'name': name,             'email': email,             'password': sub         }         created_user = api_client.create_user(user_data)         if created_user and 'access_token' in created_user:             request.session['user'] = {                 'email': email,                 'name': name,                 'picture': user_info.get('picture'),                 'access_token': created_user['access_token'],             }         else:             # No guardar token si no se obtiene token local             # Podrías decidir redirigir a error o logout             return redirect('auth0_logout')      return redirect('dashboard')    def auth0_logout(request):     request.session.flush()     return redirect(f"https://{settings.AUTH0_DOMAIN}/v2/logout?" + urlencode({         'client_id': settings.AUTH0_CLIENT_ID,         'returnTo': 'http://localhost:8000'     }))  # -------------------- DASHBOARD --------------------  # login_required_custom @login_required_custom def dashboard(request):     user_session = request.session.get('user')     if not user_session or 'access_token' not in user_session:         return redirect('auth0_login')      token = user_session['access_token']     api_client = APIClient(access_token=token)      api_response = api_client.get_dashboard()      if 'user' in api_response:         return render(request, 'dashboard.html', {             'user': api_response['user'],             'notifications': api_response.get('notifications', []),             'unread_count': api_response.get('unread_count', 0),         })     else:         # Token inválido o error, forzar logout         return redirect('auth0_logout')   # -------------------- ADD FAMILY MEMBER --------------------  @login_required_custom @csrf_exempt def add_family_member(request):     user_session = request.session.get('user')     if not user_session or 'access_token' not in user_session:         return redirect('auth0_login')      token = user_session['access_token']     api_client = APIClient(access_token=token)      if request.method == 'POST':         data = request.POST.dict()         related = request.POST.getlist('related_deceased[]')         types = request.POST.getlist('relationship_type[]')          data['related_deceased'] = related         data['relationship_type'] = types          files_to_send = []         for key, file_list in request.FILES.lists():             for f in file_list:                 files_to_send.append((key, (f.name, f.read(), f.content_type)))          # Usar base_url desde instancia api_client (opción recomendada)         url = f"{api_client.base_url}/appweb/family-members/add/"          headers = {             'Authorization': f'Bearer {token}',             # No incluir Content-Type, requests lo maneja con multipart/form-data         }          import requests         resp = requests.post(             url,             headers=headers,             data=data,             files=files_to_send,         )          if resp.status_code == 201:             return redirect('family_member_list')         else:             try:                 error_data = resp.json()             except Exception:                 error_data = resp.text             return render(request, 'add_family_member.html', {'error': error_data})      else:         deceased_list = api_client.list_deceased()         return render(request, 'add_family_member.html', {'all_deceased': deceased_list})      # -------------------- FAMILY MEMBER LIST --------------------  @login_required_custom def family_member_list(request):     user_session = request.session.get('user')     if not user_session or 'access_token' not in user_session:         return redirect('auth0_login')      token = user_session['access_token']     api_client = APIClient(access_token=token)      data = api_client.get_family_members()      miembros = data.get('miembros', [])     permisos = data.get('permisos', [])     otros_deceased = data.get('otros_deceased', [])     notifications = data.get('notifications', [])        # <-- Agregado     unread_count = data.get('unread_count', 0)           # <-- Agregado      return render(request, 'family_member_list.html', {         'miembros': miembros,         'permisos': permisos,         'otros_deceased': otros_deceased,         'notifications': notifications,       # <-- Pasar al template         'unread_count': unread_count,         # <-- Pasar al template     })    # -------------------- SHARE / EDIT / DELETE --------------------  @login_required_custom @csrf_exempt def share_family_member(request, id):     user_session = request.session.get('user')     if not user_session or 'access_token' not in user_session:         return redirect('auth0_login')      token = user_session['access_token']     api_client = APIClient(access_token=token)      if request.method == 'POST':         email = request.POST.get('email')         if not email:             return render(request, 'share_family_member.html', {'error': 'Email required.'})          response = api_client.share_family_member(id, {'email': email})          if response:             return redirect('family_member_list')         else:             return render(request, 'share_family_member.html', {'error': 'User not found or error.'})      else:         return render(request, 'share_family_member.html')  @login_required_custom @csrf_exempt def edit_family_member(request, id):     user_session = request.session.get('user')     if not user_session or 'access_token' not in user_session:         return redirect('auth0_login')      token = user_session['access_token']     api_client = APIClient(access_token=token)      if request.method == 'POST':         # 1) Construir data dict para texto, relaciones y eliminar imágenes         data = request.POST.dict()         if 'gender' not in data:             data['gender'] = request.POST.get('gender', '')          data['related_deceased']      = request.POST.getlist('related_deceased[]')         data['relationship_type']     = request.POST.getlist('relationship_type[]')         data['deleted_relation_ids']  = request.POST.getlist('deleted_relation_ids[]')         data['delete_image_ids']      = request.POST.getlist('delete_image_ids[]')         data['existing_image_id']     = request.POST.getlist('existing_image_id[]')         data['existing_video_id']     = request.POST.getlist('existing_video_id[]')         data['delete_video_ids']      = request.POST.getlist('delete_video_ids[]')          # 2) Llamar a API para actualizar fallecido (texto, relaciones, imágenes)         response = api_client.edit_family_member(id, data)          if response and response.get("id_deceased"):             # 3) Ahora procesar los archivos de vídeo SI llegaron             #    En JavaScript normalmente enviarías FormData con archivos             #    Pero, como aquí estamos en la vista de Django, tomamos request.FILES             for idx, video_file in enumerate(request.FILES.getlist('videos')):                 event_title = request.POST.get(f'video_event_{idx}', '')                 description = request.POST.get(f'video_desc_{idx}', '')                  files = { 'video_file': video_file }                 payload = {                     'id_deceased': id,                     'event_title': event_title,                     'description': description,                 }                 api_client.upload_video(payload, files)              return redirect('family_member_list')          else:             error_msg = response.get('detail', 'Error editing family member.')             return render(request, 'edit_family_member.html', {'error': error_msg})      else:         # GET: tal como indicamos, llamar a endpoints filtrados         miembro    = api_client.get_deceased(id)         relaciones = api_client.get_relations_by_deceased(id)         imagenes   = api_client.get_images_by_deceased(id)         videos     = api_client.get_videos_by_deceased(id)          return render(request, 'edit_family_member.html', {             'miembro':    miembro,             'relaciones': relaciones,             'imagenes':   imagenes,             'videos':     videos,         })    @login_required_custom @csrf_exempt def delete_family_member(request, id):     user_session = request.session.get('user')     if not user_session or 'access_token' not in user_session:         return redirect('auth0_login')      token = user_session['access_token']     api_client = APIClient(access_token=token)      if request.method == 'POST':         success = api_client.delete_family_member(id)         if success:             return redirect('family_member_list')         else:             return render(request, 'delete_family_member.html', {'error': 'Error deleting.'})     else:         miembro = api_client.get_deceased(id)         return render(request, 'delete_family_member.html', {'miembro': miembro})  @login_required_custom @csrf_exempt def request_access(request, id_deceased):     user_session = request.session.get('user')     if not user_session or 'access_token' not in user_session:         return redirect('auth0_login')      token = user_session['access_token']     api_client = APIClient(access_token=token)      if request.method == 'POST':         resp = api_client.request_access(id_deceased)         return redirect('family_member_list')     else:         return redirect('family_member_list')   @login_required_custom @csrf_exempt def approve_request(request, request_id, action):     user_session = request.session.get('user')     if not user_session or 'access_token' not in user_session:         return redirect('auth0_login')      token = user_session['access_token']     api_client = APIClient(access_token=token)      if request.method == 'POST':         resp = api_client.approve_request(request_id, action)         return redirect('family_member_list')     else:         return redirect('family_member_list')   @login_required_custom def notifications(request):     user_session = request.session.get('user')     if not user_session or 'access_token' not in user_session:         return redirect('auth0_login')      token = user_session['access_token']     api_client = APIClient(access_token=token)      notifs = api_client.get_notifications()     return render(request, 'notifications.html', {'notifications': notifs})   @login_required_custom @csrf_exempt def mark_notification_read(request, notification_id):     user_session = request.session.get('user')     if not user_session or 'access_token' not in user_session:         return redirect('auth0_login')      token = user_session['access_token']     api_client = APIClient(access_token=token)      if request.method == 'POST':         api_client.mark_notification_read(notification_id)         return redirect('family_member_list')     else:         return redirect('family_member_list')   @login_required_custom @csrf_exempt def handle_notification_action(request, notification_id, action):     user_session = request.session.get('user')     if not user_session or 'access_token' not in user_session:         return redirect('auth0_login')      token = user_session['access_token']     api_client = APIClient(access_token=token)      if request.method == 'POST':         api_client.handle_notification_action(notification_id, action)         return redirect('family_member_list')     else:         return redirect('family_member_list')   @login_required_custom def ajax_search_deceased(request):     user_session = request.session.get('user')     if not user_session or 'access_token' not in user_session:         return JsonResponse({'results': []})      token = user_session['access_token']     api_client = APIClient(access_token=token)      query = request.GET.get('q', '').strip()     if not query:         return JsonResponse({'results': []})      response = api_client.search_deceased(query)     return JsonResponse(response)    

Contenido de: C:\Users\Tu\Downloads\AppWeb4\AppWeb\mausoleum_core\output.txt
""" ASGI config for mausoleum_core project.  It exposes the ASGI callable as a module-level variable named ``application``.  For more information on this file, see https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/ """  import os  from django.core.asgi import get_asgi_application  os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mausoleum_core.settings')  application = get_asgi_application()  """ Django settings for mausoleum_core project.  Generated by 'django-admin startproject' using Django 5.2.  For more information on this file, see https://docs.djangoproject.com/en/5.2/topics/settings/  For the full list of settings and their values, see https://docs.djangoproject.com/en/5.2/ref/settings/ """ import os from dotenv import load_dotenv load_dotenv()  from pathlib import Path  LOGIN_URL = '/login/' LOGOUT_URL = '/logout/' LOGIN_REDIRECT_URL = '/dashboard/'   # Build paths inside the project like this: BASE_DIR / 'subdir'. BASE_DIR = Path(__file__).resolve().parent.parent   SESSION_ENGINE = "django.contrib.sessions.backends.cache" SESSION_CACHE_ALIAS = "default"  # Asegúrate que la caché default esté configurada, ej:  CACHES = {     "default": {         "BACKEND": "django.core.cache.backends.locmem.LocMemCache",     } }    # Quick-start development settings - unsuitable for production # See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/  # SECURITY WARNING: keep the secret key used in production secret! SECRET_KEY = 'django-insecure-dpb)k%t1#+7)7=&b^lif+9d&--wh7+#025=nq(tao&)bi0r3fa'  # SECURITY WARNING: don't run with debug turned on in production! DEBUG = True  ALLOWED_HOSTS = []   # Application definition  INSTALLED_APPS = [     'django.contrib.admin',     'django.contrib.auth',     'django.contrib.contenttypes',     'django.contrib.sessions',     'django.contrib.messages',     'django.contrib.staticfiles',     'mausoleum', ]  MIDDLEWARE = [     'django.middleware.security.SecurityMiddleware',     'django.contrib.sessions.middleware.SessionMiddleware',     'django.middleware.common.CommonMiddleware',     'django.middleware.csrf.CsrfViewMiddleware',     'django.contrib.auth.middleware.AuthenticationMiddleware',     'django.contrib.messages.middleware.MessageMiddleware',     'django.middleware.clickjacking.XFrameOptionsMiddleware', ]  ROOT_URLCONF = 'mausoleum_core.urls'  TEMPLATES = [     {         'BACKEND': 'django.template.backends.django.DjangoTemplates',         'DIRS': [],         'APP_DIRS': True,         'OPTIONS': {             'context_processors': [                 'django.template.context_processors.request',                 'django.contrib.auth.context_processors.auth',                 'django.contrib.messages.context_processors.messages',             ],         },     }, ]  WSGI_APPLICATION = 'mausoleum_core.wsgi.application'   # Database # https://docs.djangoproject.com/en/5.2/ref/settings/#databases  # DATABASES = { #     'default': { #         'ENGINE': 'django.db.backends.mysql', #         'NAME': 'vr_mausoleum', #         'USER': 'root', #         'PASSWORD': 'root', #         'HOST': 'localhost', #         'PORT': '3306', #     } # }   # Password validation # https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators  AUTH_PASSWORD_VALIDATORS = [     {         'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',     },     {         'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',     },     {         'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',     },     {         'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',     }, ]   # Internationalization # https://docs.djangoproject.com/en/5.2/topics/i18n/  LANGUAGE_CODE = 'en-us'  TIME_ZONE = 'UTC'  USE_I18N = True  USE_TZ = True   # Static files (CSS, JavaScript, Images) # https://docs.djangoproject.com/en/5.2/howto/static-files/  STATIC_URL = 'static/'  # Default primary key field type # https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field  DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'  AUTH0_CLIENT_ID = os.getenv('AUTH0_CLIENT_ID') AUTH0_CLIENT_SECRET = os.getenv('AUTH0_CLIENT_SECRET') AUTH0_DOMAIN = os.getenv('AUTH0_DOMAIN') AUTH0_CALLBACK_URL = "http://localhost:8000/callback"  MEDIA_URL = '/media/' MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  from django.contrib import admin from django.urls import path, include  urlpatterns = [     path('admin/', admin.site.urls),     path('', include('mausoleum.urls')), ]  """ WSGI config for mausoleum_core project.  It exposes the WSGI callable as a module-level variable named ``application``.  For more information on this file, see https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/ """  import os  from django.core.wsgi import get_wsgi_application  os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mausoleum_core.settings')  application = get_wsgi_application()    

Contenido de: C:\Users\Tu\Downloads\AppWeb4\AppWeb\mausoleum\migrations\output.txt
# Generated by Django 4.2.16 on 2025-04-27 19:33  from django.db import migrations, models   class Migration(migrations.Migration):      initial = True      dependencies = [     ]      operations = [         migrations.CreateModel(             name='Deceased',             fields=[                 ('id_deceased', models.BigAutoField(primary_key=True, serialize=False)),                 ('name', models.CharField(max_length=100)),                 ('date_born', models.DateTimeField(blank=True, null=True)),                 ('date_death', models.DateTimeField(blank=True, null=True)),                 ('description', models.CharField(blank=True, max_length=100, null=True)),                 ('burial_place', models.CharField(blank=True, max_length=100, null=True)),                 ('visualization_state', models.BooleanField(default=True)),                 ('visualization_code', models.CharField(blank=True, max_length=100, null=True)),             ],             options={                 'db_table': 'TBL_DECEASED',                 'managed': False,             },         ),         migrations.CreateModel(             name='User',             fields=[                 ('id_user', models.BigAutoField(primary_key=True, serialize=False)),                 ('name', models.CharField(max_length=100)),                 ('email', models.CharField(max_length=100, unique=True)),                 ('password', models.CharField(blank=True, max_length=250, null=True)),             ],             options={                 'db_table': 'TBL_USER',                 'managed': False,             },         ),     ]  # Generated by Django 5.2 on 2025-04-27 21:25  from django.db import migrations, models   class Migration(migrations.Migration):      dependencies = [         ('mausoleum', '0001_initial'),     ]      operations = [         migrations.CreateModel(             name='Image',             fields=[                 ('id_image', models.BigAutoField(primary_key=True, serialize=False)),                 ('link_image', models.CharField(max_length=255)),                 ('event_title', models.CharField(max_length=100)),                 ('description', models.CharField(max_length=255)),             ],             options={                 'db_table': 'TBL_IMAGE',                 'managed': False,             },         ),         migrations.CreateModel(             name='Video',             fields=[                 ('id_video', models.BigAutoField(primary_key=True, serialize=False)),                 ('link_video', models.CharField(max_length=255)),                 ('event_title', models.CharField(max_length=100)),                 ('description', models.CharField(max_length=255)),             ],             options={                 'db_table': 'TBL_VIDEO',                 'managed': False,             },         ),     ]  # Generated by Django 5.2.1 on 2025-05-26 21:30  from django.db import migrations   class Migration(migrations.Migration):      dependencies = [         ('mausoleum', '0002_image_video'),     ]      operations = [         migrations.DeleteModel(             name='Deceased',         ),         migrations.DeleteModel(             name='Image',         ),         migrations.DeleteModel(             name='User',         ),         migrations.DeleteModel(             name='Video',         ),     ]    

Contenido de: C:\Users\Tu\Downloads\AppWeb4\AppWeb\mausoleum\templates\output.txt


Contenido de: C:\Users\Tu\Downloads\AppWeb4\AppWeb\mausoleum\__pycache__\output.txt


Contenido de: C:\Users\Tu\Downloads\AppWeb4\AppWeb\mausoleum\migrations\__pycache__\output.txt


Contenido de: C:\Users\Tu\Downloads\AppWeb4\AppWeb\mausoleum_core\__pycache__\output.txt



